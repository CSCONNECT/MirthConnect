<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN' 'conf/dtd/mybatis-3-mapper.dtd'>

<mapper namespace="Message">
	<resultMap id="connectorMessage" type="ConnectorMessage">		
		<id property="messageId" column="MESSAGE_ID" />
		<id property="metaDataId" column="ID" />
		<result property="connectorName" column="CONNECTOR_NAME" />
		<result property="serverId" column="SERVER_ID" />
		<result property="receivedDate" column="RECEIVED_DATE" />
		<result property="status" column="STATUS" />
		<result property="sendAttempts" column="SEND_ATTEMPTS" />
		<result property="sendDate" column="SEND_DATE" />
		<result property="responseDate" column="RESPONSE_DATE" />
		<result property="errorCode" column="ERROR_CODE" />
		<result property="chainId" column="CHAIN_ID" />
		<result property="orderId" column="ORDER_ID" />
		<collection property="metaDataMap" column="{localChannelId=LOCAL_CHANNEL_ID,messageId=MESSAGE_ID,metaDataId=ID}" ofType="map" select="selectCustomMetaData" />
	</resultMap>
	
	<resultMap id="messageContent" type="com.mirth.connect.donkey.model.message.MessageContent">
		<id property="messageId" column="MESSAGE_ID" />
		<id property="metaDataId" column="METADATA_ID" />
		<result property="contentType" column="CONTENT_TYPE" typeHandler="com.mirth.connect.server.sqlmap.extensions.ContentTypeHandler" />
		<result property="content" column="CONTENT" />
		<result property="dataType" column="DATA_TYPE" />
		<result property="encrypted" column="IS_ENCRYPTED" />
	</resultMap>
	
	<resultMap id="messageSearchResult" type="MessageSearchResult">
		<result property="messageId" column="ID" />
		<result property="serverId" column="SERVER_ID" />
		<result property="receivedDate" column="RECEIVED_DATE" />
		<result property="processed" column="PROCESSED" />
		<result property="originalId" column="ORIGINAL_ID" />
		<result property="importId" column="IMPORT_ID" />
		<result property="importChannelId" column="IMPORT_CHANNEL_ID" />
		<result property="metaDataIds" column="METADATA_IDS" />
	</resultMap>
	
	<resultMap id="message" type="Message">
		<result property="messageId" column="ID" />
		<result property="serverId" column="SERVER_ID" />
		<result property="receivedDate" column="RECEIVED_DATE" />
		<result property="processed" column="PROCESSED" />
		<result property="originalId" column="ORIGINAL_ID" />
		<result property="importId" column="IMPORT_ID" />
		<result property="importChannelId" column="IMPORT_CHANNEL_ID" />
	</resultMap>
	
	<resultMap id="pruner-message-map" type="map">
		<result property="id" column="ID" javaType="Long" />
		<result property="server_id" column="SERVER_ID" javaType="String" />
		<result property="received_date" column="RECEIVED_DATE" javaType="java.util.Calendar" />
		<result property="mm_received_date" column="MM_RECEIVED_DATE" javaType="java.util.Calendar" />
		<result property="processed" column="PROCESSED" javaType="Boolean" />
		<result property="original_Id" column="ORIGINAL_ID" javaType="Long" />
		<result property="import_id" column="IMPORT_ID" javaType="Long" />
		<result property="import_channel_id" column="IMPORT_CHANNEL_ID" javaType="String" />
	</resultMap>
	
	<resultMap id="reprocess-map" type="map">
		<result property="id" column="ID" javaType="Long" />
		<result property="import_id" column="IMPORT_ID" javaType="Long" />
	</resultMap>

	<select id="searchMessages" parameterType="map" resultMap="messageSearchResult">
		<if test="offset != null and limit != null">
			SELECT A.* FROM (SELECT B.*, ROWNUM B_ROWNUM FROM (
		</if>

		SELECT
			MESSAGE.ID,
			MESSAGE.SERVER_ID,
			MESSAGE.RECEIVED_DATE,
			MESSAGE.PROCESSED,
			MESSAGE.ORIGINAL_ID,
			MESSAGE.IMPORT_ID,
			MESSAGE.IMPORT_CHANNEL_ID,
			METADATA_IDS
		
		FROM (
			SELECT M.ID, LISTAGG(MM.ID, ',') WITHIN GROUP (ORDER BY M.ID) METADATA_IDS
			<include refid="searchMessagesBody" />
			GROUP BY M.ID
	
			ORDER BY M.ID DESC
		) SUBQUERY

		INNER JOIN D_M${localChannelId} MESSAGE ON SUBQUERY.ID = MESSAGE.ID
		ORDER BY MESSAGE.ID DESC

		<if test="offset != null and limit != null">
			) B WHERE ROWNUM <![CDATA[ <= ]]> (${offset} + ${limit})) A WHERE B_ROWNUM > ${offset}
		</if>
	</select>
	
	<select id="searchMessagesCount" parameterType="map" resultType="long">
		SELECT COUNT(*) FROM (
			SELECT M.ID
			<include refid="searchMessagesBody" />
			GROUP BY M.ID
		) SUBQUERY
	</select>
	
	<select id="selectMessageIdsForReprocessing" parameterType="map" resultMap="reprocess-map">
		SELECT DISTINCT M.ID, M.IMPORT_ID
		<include refid="searchMessagesBody" />
		ORDER BY M.ID ASC
	</select>

	<select id="selectMessageForReprocessing" parameterType="map" resultMap="messageContent">
		SELECT MESSAGE_ID, METADATA_ID, CONTENT_TYPE, CONTENT, DATA_TYPE, IS_ENCRYPTED
		FROM D_MC${localChannelId}
		WHERE MESSAGE_ID = #{messageId}
		AND METADATA_ID = 0
		AND CONTENT_TYPE = 1
	</select>
	
	<sql id="searchMessagesBody">
		FROM D_M${localChannelId} M
		JOIN D_MM${localChannelId} MM ON MM.MESSAGE_ID = M.ID
		
		<if test="textSearch != null || metaDataSearch != null">
			LEFT JOIN D_MCM${localChannelId} MCM ON MCM.MESSAGE_ID = MM.MESSAGE_ID AND MCM.METADATA_ID = MM.ID
		</if>
		
		<if test="contentSearch != null">
			<foreach item="element" collection="contentSearch">
				LEFT JOIN D_MC${localChannelId} MC_${element.contentCode} ON MC_${element.contentCode}.MESSAGE_ID = M.ID AND MC_${element.contentCode}.IS_ENCRYPTED = 0
				
				<choose>
					<!-- If the content code is RAW, use the source ENCODED for destination RAW -->
					<when test="element.contentCode == 1">
						AND MC_${element.contentCode}.METADATA_ID = 0 AND ((MM.ID = 0 AND MC_${element.contentCode}.CONTENT_TYPE = 1) OR (MM.ID > 0 AND MC_${element.contentCode}.CONTENT_TYPE = 4))
					</when>
					<otherwise>
						AND MC_${element.contentCode}.METADATA_ID = MM.ID AND MC_${element.contentCode}.CONTENT_TYPE = #{element.contentCode}
					</otherwise>
				</choose>
			</foreach>
		</if>
		
		<where>
			<if test="messageIdLower != null">
				M.ID <![CDATA[ >= ]]> #{messageIdLower}
			</if>
			<if test="messageIdUpper != null">
				AND M.ID <![CDATA[ <= ]]> #{messageIdUpper}
			</if>
			<if test="maxMessageId != null">
				AND M.ID <![CDATA[ <= ]]> #{maxMessageId}
			</if>
			<if test="startDate != null">
				AND M.RECEIVED_DATE <![CDATA[ >= ]]> #{startDate}
			</if>
			<if test="endDate != null">
				AND M.RECEIVED_DATE <![CDATA[ <= ]]> #{endDate}
			</if>
			<if test="serverId != null">
				AND M.SERVER_ID LIKE '%' || #{serverId} || '%'
			</if>
			<if test="originalIdLower != null">
				AND M.ORIGINAL_ID <![CDATA[ >= ]]> #{originalIdLower}
			</if>
			<if test="originalIdUpper != null">
				AND M.ORIGINAL_ID <![CDATA[ <= ]]> #{originalIdUpper}
			</if>
			<if test="importIdLower != null">
				AND M.IMPORT_ID <![CDATA[ >= ]]> #{importIdLower}
			</if>
			<if test="importIdUpper != null">
				AND M.IMPORT_ID <![CDATA[ <= ]]> #{importIdUpper}
			</if>
			<if test="textSearch != null">
				AND (
				CAST(M.ID AS VARCHAR2(255 CHAR)) LIKE '%' || #{textSearch} || '%'
				OR MM.CONNECTOR_NAME LIKE '%' || #{textSearch} || '%'
				
				<if test="contentSearch != null">
					<foreach item="element" collection="contentSearch">
						OR MC_${element.contentCode}.CONTENT LIKE '%' || #{textSearch} || '%'
					</foreach>
				</if>
				
				<foreach item="column" collection="textSearchMetaDataColumns">
					OR MCM."${column}" LIKE '%' || #{textSearch} || '%'
				</foreach>
				)
			</if>
			<if test="statuses != null">
				AND MM.STATUS IN
				<foreach item="status" collection="statuses" open="(" separator="," close=")">
					#{status}
				</foreach>
			</if>
			<if test="includedMetaDataIds != null">
				AND MM.ID IN
				<foreach item="metaDataId" collection="includedMetaDataIds" open="(" separator="," close=")">
					#{metaDataId}
				</foreach>
			</if>
			<if test="excludedMetaDataIds != null">
				AND MM.ID NOT IN
				<foreach item="metaDataId" collection="excludedMetaDataIds" open="(" separator="," close=")">
					#{metaDataId}
				</foreach>
			</if>
			
			<if test="contentSearch != null">
				<foreach item="element" collection="contentSearch">
					<foreach item="searchString" collection="element.searches">
						AND MC_${element.contentCode}.CONTENT LIKE '%' || #{searchString} || '%'
					</foreach>
				</foreach>
			</if>
			
			<if test="sendAttemptsLower != null">
				AND MM.SEND_ATTEMPTS <![CDATA[ >= ]]> #{sendAttemptsLower}
			</if>
			<if test="sendAttemptsUpper != null">
				AND MM.SEND_ATTEMPTS <![CDATA[ <= ]]> #{sendAttemptsUpper}
			</if>
			<if test="attachment != null and attachment == true">
				AND EXISTS (SELECT 1 FROM D_MA${localChannelId} MA WHERE MA.MESSAGE_ID = M.ID)
			</if>
			<if test="error != null and error == true">
				AND MM.ERROR_CODE <![CDATA[ > ]]> 0
			</if>
			<if test="metaDataSearch != null">
				<foreach item="element" collection="metaDataSearch">
					AND 
					
					<choose>
						<when test="element.ignoreCase">
							UPPER(MCM."${element.columnName}")
						</when>
						<otherwise>
							MCM."${element.columnName}"
						</otherwise>
					</choose>
					
					<choose>
						<when test="element.operator == 'EQUAL'">
							<![CDATA[ = ]]> 
						</when>
						<when test="element.operator == 'NOT_EQUAL'">
							<![CDATA[ != ]]> 
						</when>
						<when test="element.operator == 'LESS_THAN'">
							<![CDATA[ < ]]> 
						</when>
						<when test="element.operator == 'LESS_THAN_OR_EQUAL'">
							<![CDATA[ <= ]]> 
						</when>
						<when test="element.operator == 'GREATER_THAN'">
							<![CDATA[ > ]]> 
						</when>
						<when test="element.operator == 'GREATER_THAN_OR_EQUAL'">
							<![CDATA[ >= ]]> 
						</when>
						<when test="element.operator == 'CONTAINS' || element.operator == 'STARTS_WITH' || element.operator == 'ENDS_WITH'">
							LIKE
						</when>
					</choose>
					
					<if test="element.operator == 'CONTAINS' || element.operator == 'ENDS_WITH'">
						'%' ||
					</if>
					
					<choose>
						<when test="element.ignoreCase">
							UPPER(#{element.value})
						</when>
						<otherwise>
							#{element.value}
						</otherwise>
					</choose>
					
					<if test="element.operator == 'CONTAINS' || element.operator == 'STARTS_WITH'">
						|| '%'
					</if>
				</foreach>
			</if>
		</where>
	</sql>
	
	<select id="selectMessageById" resultMap="message">
		SELECT 
			ID,
			SERVER_ID,
			RECEIVED_DATE,
			PROCESSED,
			ORIGINAL_ID,
			IMPORT_ID,
			IMPORT_CHANNEL_ID
			
		FROM D_M${localChannelId}
		WHERE ID = #{messageId}
	</select>
	
	<select id="selectMessageContent" resultMap="messageContent">
		SELECT 
			METADATA_ID,
			MESSAGE_ID,
			CONTENT_TYPE,
			CONTENT,
			DATA_TYPE,
			IS_ENCRYPTED
			
		FROM D_MC${localChannelId}
		WHERE MESSAGE_ID = #{messageId}
		AND METADATA_ID IN
		<foreach item="metaDataId" collection="metaDataIds" open="(" separator="," close=")">
			#{metaDataId}
		</foreach>
	</select>
	
	<select id="selectMessageAttachmentIds" parameterType="map" resultType="Attachment">
		SELECT ID, TYPE FROM D_MA${localChannelId}
		WHERE MESSAGE_ID = #{messageId}
		GROUP BY ID, TYPE
	</select>
	
	
	
	<!-- Data Pruner/Archiver -->
	
	<delete id="pruneMessages" parameterType="map">
		DELETE FROM D_M${localChannelId}
		WHERE ID IN (
			SELECT M.ID
			FROM D_M${localChannelId} M
			
			<if test="dateThreshold != null">
				JOIN D_MM${localChannelId} MM ON MM.MESSAGE_ID = M.ID AND MM.ID = 0 AND MM.RECEIVED_DATE <![CDATA[ < ]]> #{dateThreshold}
			</if>
			
			<where>
				<include refid="pruneWhere" />
				
				<if test="limit != null">
					AND ROWNUM <![CDATA[ <= ]]> ${limit}
				</if>
			</where>
		)
	</delete>
	
	<delete id="pruneMessageContent" parameterType="map">
		DELETE FROM D_MC${localChannelId}
		WHERE MESSAGE_ID IN (
			SELECT M.ID
			FROM D_M${localChannelId} M
			<if test="dateThreshold != null">
				JOIN D_MM${localChannelId} MM ON MM.MESSAGE_ID = M.ID AND MM.ID = 0 AND MM.RECEIVED_DATE <![CDATA[ < ]]> #{dateThreshold}
			</if>
			
			<where>
				<include refid="pruneWhere" />

				<if test="limit != null">
					AND ROWNUM <![CDATA[ <= ]]> ${limit}
				</if>
			</where>
		)
	</delete>

	<sql id="pruneWhere">
	
		<!-- The following criteria are intended to be used only by the archiver, or the pruner if there is no archiver. -->
		
		<if test="skipIncomplete == true">
			AND M.PROCESSED = 1
		</if>
		
		<if test="skipStatuses != null">
			AND NOT EXISTS (
				SELECT 1
				FROM D_MM${localChannelId} MM
				WHERE MM.MESSAGE_ID = M.ID
				AND MM.STATUS IN
				<foreach item="status" collection="skipStatuses" open="(" separator="," close=")">
					#{status}
				</foreach>
			)
		</if>
		
				
		<!-- The following criteria are intended to be used only by the pruner to constrain pruning to messages that were archived. -->
		
		<if test="includeMessageList != null">
			AND M.ID IN (${includeMessageList})
		</if>
		
		<if test="excludeMessageList != null">
			AND M.ID NOT IN (${excludeMessageList})
		</if>
		
		<if test="includeMessageRanges != null">
			AND
			<foreach item="range" collection="includeMessageRanges" open="(" separator="OR" close=")">
				M.ID BETWEEN #{range[0]} AND #{range[1]}
			</foreach>
		</if>
		
		<if test="excludeMessageRanges != null">
			AND
			<foreach item="range" collection="excludeMessageRanges" open="(" separator="AND" close=")">
				M.ID NOT BETWEEN #{range[0]} AND #{range[1]}
			</foreach>
		</if>

		<if test="minMessageId != null and maxMessageId != null">
			AND M.ID BETWEEN #{minMessageId} AND #{maxMessageId}
		</if>
	</sql>
	
	<select id="getMessagesToPrune" parameterType="map" resultMap="pruner-message-map">
		<if test="offset != null and limit != null">
			SELECT A.* FROM (SELECT B.*, ROWNUM B_ROWNUM FROM (
		</if>

			SELECT
				M.ID,
				M.SERVER_ID,
				M.RECEIVED_DATE,
				M.PROCESSED,
				M.ORIGINAL_ID,
				M.IMPORT_ID,
				M.IMPORT_CHANNEL_ID,
				MM.RECEIVED_DATE AS MM_RECEIVED_DATE
			
			FROM D_M${localChannelId} M
			JOIN D_MM${localChannelId} MM ON MM.MESSAGE_ID = M.ID AND MM.ID = 0
			
			<if test="skipStatuses != null">
				LEFT JOIN D_MM${localChannelId} MM_SKIP ON MM_SKIP.MESSAGE_ID = M.ID AND MM_SKIP.STATUS IN
				<foreach item="status" collection="skipStatuses" open="(" separator="," close=")">
					#{status}
				</foreach>
			</if>
		
			WHERE MM.RECEIVED_DATE <![CDATA[ < ]]> #{dateThreshold}
			
			<if test="skipIncomplete == true">
				AND M.PROCESSED = 1
			</if>
			
			<if test="skipStatuses != null">
				AND MM_SKIP.ID IS NULL
			</if>
			
			ORDER BY M.ID
		
		<if test="offset != null and limit != null">
			) B WHERE ROWNUM <![CDATA[ <= ]]> (${offset} + ${limit})) A WHERE B_ROWNUM > ${offset}
		</if>
	</select>
	
	<update id="pruneEvents" parameterType="map">
		DELETE FROM EVENT
		WHERE DATE_CREATED <![CDATA[ < ]]> #{dateThreshold}
	</update>
</mapper>